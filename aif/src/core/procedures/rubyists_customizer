#!/bin/bash
# Bash Module
#
# Contains routines we use to help flesh out our additionals.

# Dependencies
depend_procedure core base

customizer_system_prep ()
{
  # <!-- begin_system_prep = Rubyists, LLC. Default Build -->
  # Create and populate a directory with git pull of all our required files going forward.
	BUILD_CONFIG_DIR="/usr/local/rubyists/config"
	
	mkdir -p $BUILD_CONFIG_DIR
  cd $BUILD_CONFIG_DIR
	# CHANGE ME - Replace with final repo url
  git clone git@githost.dom/rubyists/default_build.git
  cd default_build
	
	# Add 'callcenter' user
	useradd -g users -m -G wheel -s /bin/bash callcenter
	
	# Configure our preferred, minimalistic, sudoers file
	echo "root ALL=(ALL) ALL" > ./sudoers
	echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> ./sudoers
	mv -f ./sudoers /etc/sudoers
	chown root:root /etc/suders
	chmod 440 /etc/sudoers
	
	# Set up ssh access to 'callcenter'
	# Physically ensure proper owner+perms are set correctly.
	cp -R $BUILD_CONFIG_DIR/default_build/.ssh /home/useradd/
	chown -R callcenter:users /home/callcenter/.ssh
	chmod 700 /home/callcenter/.ssh
	chmod 600 /home/callcenter/.ssh/authorized_keys
	
  # <!-- end_system_prep
}

customizer_install_support_packages ()
{
  # <!-- begin_install_support_packages = Rubyists, LLC. Default Build -->
	# Expect 'callcenter'
  whoami
	
	# Change to 'callcenter'. All further work should be owned by 'callcenter'
	su - callcenter

	# Configure filesystem for package builds
  mkdir $HOME/builds
  cd $HOME/builds

	# Copy our required pacman.conf into place and update system. Capture a logfile of the action.
	cp $BUILD_CONFIG_DIR/default_build/pacman/pacman.conf /etc/pacman.conf
	chown root:root /etc/pacman.conf
	chmod 644 /etc/pacman.conf
	
	# This will get rebuilt anyways and stops potential errors
	rm /etc/profile.d/locale.sh
	
	# Now sync and update the package lists, then upgrade the system.
	sudo pacman -Syy
	sudo pacman --noprogressbar --noconfirm --logfile $HOME/pacman_install_and_upgrade.log -Syu
	
	# Get all needed AUR packages for our configuration.
	# TODO: Change this so a sourced file of packages we can pass to a looped $(wget $url)
  wget http://aur.archlinux.org/packages/fg/fgetty/fgetty.tar.gz
  wget http://aur.archlinux.org/packages/ru/runit-dietlibc/runit-dietlibc.tar.gz
  wget http://aur.archlinux.org/packages/ru/runit-run/runit-run.tar.gz
  wget http://aur.archlinux.org/packages/ru/runit-services/runit-services.tar.gz
  wget http://aur.archlinux.org/packages/sv/sv-helper/sv-helper.tar.gz
  wget http://aur.archlinux.org/packages/so/socklog-dietlibc/socklog-dietlibc.tar.gz
  wget http://aur.archlinux.org/packages/fr/freeswitch-git/freeswitch-git.tar.gz
  
	# Now extract, build, create, and install AUR packages we grabbed
	# TODO: Change this to a sourced, ordered, file for package install
  for name in ./*.gz ; do tar -xzvf $name ; done
  cd fgetty && makepkg -si
  cd ../runit-dietlib && makepkg -si
  cd ../runit-run && makepkg -si
  cd ../socklog-dietlib && makepkg -si
  cd ../runit-services && makepkg -si
  cd ../sv-helper && makepkg -si
  cd ../freeswitch-git && makepkg -si
  <!-- end_install_support_packages -->
}

customizer_configure_runit_services_and_logs ()
{
  # <!-- begin_configure_runit_services_and_logs = Rubyists, LLC. Default Build -->
	# Create default runit services
  sudo ln -s /etc/sv/sshd /service/sshd
  sudo ln -s /etc/sv/cron /service/cron
	
	# Set up socklog
  sudo socklog-conf unix root daemon
  sudo socklog-conf klog root daemon
  sudo ln -s /etc/sv/socklog-unix /service/socklog-unix
  sudo ln -s /etc/sv/socklog-klog /service/socklog-klog
  
	# Enable freeswitch as a default service last always. Not required, just good form that last service enabled
	# be that which everything else was installed as support for.
	sudo ln -s /etc/sv/freeswitch /service/freeswitch 
  # <!-- end_configure_runit_services_and_logs -->
}